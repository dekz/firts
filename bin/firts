#!/usr/bin/env ruby
require 'thor'
$:.unshift File.expand_path(File.join(File.dirname(__FILE__), '../lib'))
require 'firts'

class FirtsApp < Thor
  map '-v' => 'version'
  map '--version' => 'version'

  desc 'worker [CONFIG]', 'Start a simple worker'
  method_option :ts, :type => :string, :aliases => '-t', :desc => 'TupleSpace location'
  method_option :num, :type => :numeric, :aliases => '-n', :desc => 'Number of workers'
  method_option :num_wr, :type => :numeric, :aliases => '-r', :desc => 'Number of worker runners'
  method_option :daemonize, :type => :string, :aliases => '-d', :desc => 'Daemonize the worker runners'
  method_option :timeout, :type => :numeric, :desc => 'MAX timeout in seconds for a job to run for'
  def worker(name=nil)
    opts = options.dup
    opts[:server] = options[:ts] if options[:ts]
    opts[:worker_count] = options[:num] || 1
    opts[:worker_runners] = options[:num_wr] || 1
    opts[:job_exec_timeout] = options[:timeout]
    opts[:name] = name unless name.nil?
    if opts[:daemonize]
      # FORK DAEMONIZE
      opts[:worker_runners].times do |i|
        fork do
          begin
            runner = Firts::WorkerRunner.new opts
            runner.run
          rescue Interrupt
            runner.cleanup
          end
        end
      end
    else
      # THREADED RUN
      threads = []
      worker_runners = []
      opts[:worker_runners].times do |i|
        threads << Thread.new do
          runner = Firts::WorkerRunner.new opts
          worker_runners << runner
          runner.run
        end
      end

      begin
        threads.each { |t| t.join }
      rescue Interrupt
        worker_runners.each { |w| w.cleanup }
      end
    end
  end

  desc 'taskmaster [CONFIG]', 'Start a taskmaster'
  method_option :ts, :type => :string, :aliases => '-t', :desc => 'TupleSpace location'
  def taskmaster(config={})
    opts = options.dup
    opts[:server] = options[:ts] if options[:ts]
    # Setup an IRB object
    t = Thread.new do
      $tm = Taskmaster.new opts
      obj = Object.new
      obj.instance_eval do
        def job(*args, &block); Job::create(*args, &block); end
        def tm; $tm; end
        def method_missing(*args); method, args = *args; $tm.send(method.to_sym, *args); end
        def inspect; 'Taskmaster'; end
        def to_s; 'Taskmaster'; end
      end
      begin
        require 'irb'
        ARGV.clear
        IRB.setup nil
        irb = IRB::Irb.new(IRB::WorkSpace.new(obj))
        IRB.conf[:MAIN_CONTEXT] = irb.context
        require 'irb/ext/multi-irb'
        ::IRB.irb nil, obj
      ensure
        # This is to get around the unknown issue of IRB not exiting properly with TM
        $tm.close
        exit 0
      end
    end
    t.join
  end

  desc 'watcher', 'Start a watcher'
  method_option :ts, :type => :string, :aliases => '-t', :desc => 'TupleSpace location'
  def watcher(config={})
    opts = options.dup
    opts[:server] = options[:ts] if options[:ts]
    watcher = Watcher.new opts
    watcher.watch
  end

  desc 'ts [CONFIG]', 'Start a TupleSpace'
  method_option :ts, :type => :string, :aliases => '-t', :desc => 'TupleSpace location'
  def ts(config={})
    ts = TupleServer.new options
  end
end

FirtsApp.start
